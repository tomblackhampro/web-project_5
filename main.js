!function(){"use strict";document.querySelector(".popup-image"),document.querySelector(".popup__image"),document.querySelector(".popup__title-img");const e=".card__delete-button",t=document.querySelector(".profile__rectangle-edit"),r=document.querySelector("#name"),i=document.querySelector("#aboutme"),s=document.querySelector(".profile__rectangle-add"),o={};document.querySelectorAll(".popup__close");var n=class{constructor(t,r,i){this._title=t.title,this._imgUrl=t.imgUrl,this._handleCardClick=i,this._cardSelector=r,this._deleteButton=e}_getTemplate(){return document.querySelector(this._cardSelector).content.cloneNode(!0)}_setEventListeners(){this._cardImage.addEventListener("click",(e=>{this._handleCardClick({imgSrc:e.target.getAttribute("src"),imgAlt:e.target.getAttribute("alt")})})),this._element.querySelector(e).addEventListener("click",this._deleteCard.bind(this)),this._element.querySelector(".card__like-button").addEventListener("click",this._toggleLike.bind(this))}_deleteCard(e){e.target.closest(".card").remove()}_toggleLike(e){e.target.classList.toggle("card__like-button_active")}generateCard(){return this._element=this._getTemplate(),this._cardTitle=this._element.querySelector(".card__title"),this._cardImage=this._element.querySelector(".card__image"),this._cardTitle.textContent=this._title,this._cardImage.setAttribute("src",`${this._imgUrl}`),this._cardImage.setAttribute("alt",`image of ${this._title}`),this._setEventListeners(),this._element}};class l{constructor(e){var t,r,i;t=this,i=e=>{"Escape"==e.key&&this.close()},(r=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(r="_handleEscClose"))in t?Object.defineProperty(t,r,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[r]=i,this._selector=e,this._popup=document.querySelector(this._selector),this._popupCloseButton=this._popup.querySelector(".popup__close")}_handleRemoteClickClose(e){const t=this._popup.querySelector(".popup__background");e.target===t&&this.close()}open(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popupCloseButton.addEventListener("click",(()=>{this.close()})),this._popup.addEventListener("mousedown",(e=>{this._handleRemoteClickClose(e)}))}}class a extends l{constructor(e,t){super(e),this._submitCallback=t,this._form=this._popup.querySelector(".popup__form"),this._inputList=this._form.querySelectorAll(".popup__input")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._submitCallback(this._getInputValues()),this.close()}))}close(){super.close(),this._form.reset()}}const c=new class{constructor(e,t){let{items:r,renderer:i}=e;this._items=r,this._renderer=i,this._containerWrapper=document.querySelector(t)}renderItems(){this._items.forEach((e=>{const t=this._renderer(e);this.addItem(t)}))}addItem(e){this._containerWrapper.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald Mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],renderer:e=>h(e.link,e.name)},".places__list");c.renderItems();const u=new a(".popup-profile",(e=>{m.setUserInfo({name:e.name,jobTitle:e.aboutme})}));u.setEventListeners();const p=new a(".popup-add",(e=>{const t=h(e.imagelink,e.title);c.addItem(t)}));p.setEventListeners();const _=new class extends l{constructor(e){super(e),this._popupImg=this._popup.querySelector(".popup__image"),this._popupImgDescription=this._popup.querySelector(".popup__title-img")}_setImageProperties(){this._popupImg.setAttribute("src",this._imgSrc),this._popupImg.setAttribute("alt",`image of ${this._imgAlt}`),this._popupImgDescription.textContent=this._imgAlt}open(e){let{name:t,link:r}=e;this._imgSrc=t,this._imgAlt=r,this._setImageProperties(),super.open()}}(".popup-image");var d;_.setEventListeners(),d={errorSelector:".popup__error",formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button-save",inputErrorClass:"popup__input_type_error",inactiveButtonClass:"popup__button_disabled",errorClass:"popup__error_visible"},Array.from(document.querySelectorAll(d.formSelector)).forEach((e=>{const t=new class{constructor(e,t){var r,i,s;r=this,s=()=>this._inputList.every((e=>e.validity.valid)),(i=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var i=r.call(e,"string");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(i="_checkFormValidity"))in r?Object.defineProperty(r,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):r[i]=s,this._formElement=t,this._inputList=Array.from(this._formElement.querySelectorAll(e.inputSelector)),this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._submitButtonSelector=e.submitButtonSelector,this._inputSelector=e.inputSelector,this._formSelector=e.formSelector,this._button=this._formElement.querySelector(this._submitButtonSelector)}_setEventListeners(){this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_checkInputValidity(e){e.validity.valid?this._hideError(e):this._showError(e)}_showError(e){const t=this._formElement.querySelector(`.${e.id}-error`);console.log(t,"show"),t&&(t.textContent=e.validationMessage,t.classList.add(this._errorClass),e.classList.add(this._inputErrorClass))}_hideError(e){const t=this._formElement.querySelector(`.${e.id}-error`);console.log(t,"hide"),t&&(t.textContent="",t.classList.remove(this._errorClass),e.classList.remove(this._inputErrorClass))}_toggleButtonState(){this._checkFormValidity()?(this._button.classList.remove(this._inactiveButtonClass),this._button.disabled=!1):(this._button.classList.add(this._inactiveButtonClass),this._button.disabled=!0)}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(),this._toggleButtonState()}}(d,e),r=e.getAttribute("name");o[r]=t,t.enableValidation()}));const m=new class{constructor(e){let{nameSelector:t,descriptionSelector:r}=e;this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(r)}getUserInfo(){return{nameSelector:this._nameElement.textContent,descriptionSelector:this._descriptionElement.textContent}}setUserInfo(e){let{name:t,jobTitle:r}=e;this._nameElement.textContent=t,this._descriptionElement.textContent=r}}({nameSelector:".profile__title",descriptionSelector:".profile__description"});function h(e,t){return new n({imgUrl:e,title:t},"#card-template",(e=>{let{imgSrc:t,imgAlt:r}=e;_.open({name:t,link:r})})).generateCard()}m.setUserInfo({name:"Jacques Cousteau",jobTitle:"Explorer"}),t.addEventListener("click",(()=>{const e=m.getUserInfo();r.value=e.nameSelector,i.value=e.descriptionSelector,u.open()})),s.addEventListener("click",(()=>{o[formadd.getAttribute("name")].resetValidation(),p.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,